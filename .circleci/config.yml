version: 2.1

jobs:
    build_doc:
      docker:
        - image: cimg/base:stable-20.04
      steps:
        - restore_cache:
            name: Restore .git
            keys:
              - source-cache-graphs
        - checkout
        - run:
            name: Complete checkout
            command: |
              if ! git remote -v | grep upstream; then
                git remote add upstream https://github.com/py-why/graphs.git
              fi
              git remote set-url upstream https://github.com/py-why/graphs.git
              git fetch upstream
        - save_cache:
            name: Save .git
            key: source-cache-graphs
            paths:
              - ".git"
        - run:
            name: Check-skip
            command: |
              set -e
              export COMMIT_MESSAGE=$(git log --format=oneline -n 1);
              if [[ -v CIRCLE_PULL_REQUEST ]] && ([[ "$COMMIT_MESSAGE" == *"[skip circle]"* ]] || [[ "$COMMIT_MESSAGE" == *"[circle skip]"* ]]); then
                echo "Skip detected, exiting job ${CIRCLE_JOB} for PR ${CIRCLE_PULL_REQUEST}."
                circleci-agent step halt;
              fi
        - run:
            name: Merge with upstream
            command: |
              echo $(git log -1 --pretty=%B) | tee gitlog.txt
              echo ${CI_PULL_REQUEST//*pull\//} | tee merge.txt
              if [[ $(cat merge.txt) != "" ]]; then
                echo "Merging $(cat merge.txt)";
                git pull --ff-only upstream "refs/pull/$(cat merge.txt)/merge";
              fi
        - run:
            name: Set BASH_ENV
            command: |
              set -e
              sudo apt install -qq graphviz optipng python3.8-venv python3-venv libxft2
              python3.8 -m venv ~/python_env
              echo "set -e" >> $BASH_ENV
              echo "export OPENBLAS_NUM_THREADS=4" >> $BASH_ENV
              echo "export XDG_RUNTIME_DIR=/tmp/runtime-circleci" >> $BASH_ENV
              echo "export PATH=~/.local/bin/:$PATH" >> $BASH_ENV
              echo "export DISPLAY=:99" >> $BASH_ENV
              echo "source ~/python_env/bin/activate" >> $BASH_ENV
              mkdir -p ~/.local/bin
              ln -s ~/python_env/bin/python ~/.local/bin/python
              echo "BASH_ENV:"
              cat $BASH_ENV
        - run:
            name: Setup pandoc
            command: sudo apt update && sudo apt install -y pandoc optipng
        - restore_cache:
            name: Restore pip cache
            keys:
              - pip-cache
        - restore_cache:
            name: Restore install-bin-cache
            keys:
              - user-install-bin-cache
        - run:
            name: Get Python running and install dependencies
            command: |
              python -m pip install --progress-bar off --upgrade pip setuptools wheel
              python -m pip install --progress-bar off .
              python -m pip install --progress-bar off .[doc,gui]
              python -m pip install --progress-bar off git+https://github.com/py-why/graphs
        - save_cache:
            name: Save pip cache
            key: pip-cache
            paths:
              - ~/.cache/pip
        - save_cache:
            name: Save install-bin-cache
            key: user-install-bin-cache
            paths:
              - ~/.local/lib/python3.8/site-packages
              - ~/.local/bin
        - run:
            name: Check pip package versions
            command: pip freeze
        - run:
            name: Check installation
            command: |
               LIBGL_DEBUG=verbose python -c "import matplotlib.pyplot as plt; plt.figure()"
               python -c "import pywhy_graphs;"
               python -c "import numpy; numpy.show_config()"
        - run:
            name: Build documentation
            command: |
              cd doc
              make html
        # Save the example test results
        - store_test_results:
            path: doc/_build/test-results
        - store_artifacts:
            path: doc/_build/test-results
            destination: test-results
        # Save the SG RST
        - store_artifacts:
            path: doc/auto_examples.zip
        - store_artifacts:
            path: doc/generated.zip
        # Save the outputs
        - store_artifacts:
            path: doc/_build/html/
            destination: dev
        - persist_to_workspace:
            root: doc/_build
            paths:
              - html

workflows:
  default:
    jobs:
      - build_doc:
          name: build_doc

